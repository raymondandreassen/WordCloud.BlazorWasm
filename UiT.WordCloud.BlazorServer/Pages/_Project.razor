@page "/_Project"
@attribute [Authorize(Roles = "Admin")]

<PageHeading Title="Prosjekt" Heading="Prosjekt" />


    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Prosjekt linker" MaxHeight="1000">
            <MudStack>
            <MudPaper Class="pa-3"><MudLink Href="">Web App</MudLink></MudPaper>
            <MudPaper Class="pa-3"><MudLink Href="">DNS record</MudLink></MudPaper>
            <MudPaper Class="pa-3"><MudLink Href="">Azure App</MudLink></MudPaper>
            <MudPaper Class="pa-3"><MudLink Href="">Azure EntApp</MudLink></MudPaper>
            <MudPaper Class="pa-3"><MudLink Href="">Azure App insights</MudLink></MudPaper>
            <MudPaper Class="pa-3"><MudLink Href="">Azure App konfigurasjoner</MudLink></MudPaper>
            <MudPaper Class="pa-3"><MudLink Href="">Key Vault</MudLink></MudPaper>
            </MudStack>
        </MudExpansionPanel>

        <MudExpansionPanel Text="Debug claims" IsExpandedChanged="ClaimsPanelExpandChange">
            @if (claims.Count() > 0)
            {
                <ul>
                    @foreach (var claim in claims)
                    {
                        <li>@claim.Type: @claim.Value</li>
                    }
                </ul>
            }

        </MudExpansionPanel>
        <MudExpansionPanel Text="Debug logger" MaxHeight="500">
            <MudGrid Spacing="2" Justify="Justify.Center">
                <MudItem xs="4"><MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Success"  OnClick="LogInfo1" Size="Size.Large" Class="ma-4 pa-4">Simple Information log</MudButton></MudItem>
                <MudItem xs="4"><MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Warning"  OnClick="LogWarn1" Size="Size.Large" Class="ma-4 pa-4">Simple Warning log</MudButton></MudItem>
                <MudItem xs="4"><MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Error"    OnClick="LogError1" Size="Size.Large" Class="ma-4 pa-4">Simple Error log</MudButton></MudItem>
                <MudItem xs="4"><MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Error"    OnClick="LogError2" Size="Size.Large" Class="ma-4 pa-4">Exception Error log</MudButton></MudItem>
                <MudItem xs="4"><MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" OnClick="LogScope1" Size="Size.Large" Class="ma-4 pa-4">Logging with Scope</MudButton></MudItem>
        </MudGrid>
        </MudExpansionPanel>

        <MudExpansionPanel Text="Ledig">
            Panel Four Content
        </MudExpansionPanel>
    </MudExpansionPanels>




@code {
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    [Inject] private ILogger<_Project> _logger { get; set; } = null!;

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private string authMessage = string.Empty;
    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userName = (authState?.User?.Identity?.IsAuthenticated ?? false) ? (authState?.User?.Identity?.Name ?? "Anonymous") : "Anonymous";
    }


    private async Task ClaimsPanelExpandChange(bool newVal)
    {
        if (newVal)
        {
            await GetClaimsPrincipalData();
        }
        else
        {
            claims = Enumerable.Empty<Claim>();
        }
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated ?? false)
        {
            string username = user.Identity.Name!;
            authMessage = $"{username} is authenticated.";
            claims = user.Claims!;
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
        }
    }

    private void LogInfo1() => _logger.LogInformation("LogInfo1 reports time {0}", DateTime.Now);
    private void LogWarn1() => _logger.LogWarning("LogWarn1 warns about time {0}", DateTime.Now);
    private void LogError1() => _logger.LogError("LogError1 says time is wrong {0}", DateTime.Now);

    private void LogError2()
    {
        try
        {
            throw new Exception("Ai ai ai, something went wrong2");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "LogError2 catch exception");
        }
    }

    private void LogScope1()
    {
        using (_logger.BeginScope("LoggerScope {userName}", userName))
        {
            _logger.Log(LogLevel.Debug,         "Debug in scope 1");
            _logger.Log(LogLevel.Information,   "Informastion in scope 2");
            _logger.Log(LogLevel.Warning,       "Warning in scope 3");
            _logger.Log(LogLevel.Error,         "Error in scope 4");
        }
        _logger.Log(LogLevel.Information, "Outside scope");
    }
}